// <auto-generated />
using System;
using DispatchManager.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DispatchManager.Infrastructure.Migrations
{
    [DbContext(typeof(DispatchManagerDbContext))]
    [Migration("20250611004604_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DispatchManager.Domain.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_Customers_Email_Unique");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Customers_Name");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("DispatchManager.Domain.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Orders_CreatedAt");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("IX_Orders_CustomerId");

                    b.HasIndex("ProductId");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Orders_Status");

                    b.HasIndex("CustomerId", "Status")
                        .HasDatabaseName("IX_Orders_CustomerId_Status");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DispatchManager.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("UnitPrice")
                        .HasDatabaseName("IX_Products_UnitPrice");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("DispatchManager.Domain.Entities.Order", b =>
                {
                    b.HasOne("DispatchManager.Domain.Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DispatchManager.Domain.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.OwnsOne("DispatchManager.Domain.ValueObjects.Coordinate", "Destination", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(10,8)")
                                .HasColumnName("DestinationLatitude");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(11,8)")
                                .HasColumnName("DestinationLongitude");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("DispatchManager.Domain.ValueObjects.Coordinate", "Origin", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Latitude")
                                .HasColumnType("decimal(10,8)")
                                .HasColumnName("OriginLatitude");

                            b1.Property<decimal>("Longitude")
                                .HasColumnType("decimal(11,8)")
                                .HasColumnName("OriginLongitude");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("DispatchManager.Domain.ValueObjects.DeliveryCost", "Cost", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("CostAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .ValueGeneratedOnAdd()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)")
                                .HasDefaultValue("USD")
                                .HasColumnName("CostCurrency");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("DispatchManager.Domain.ValueObjects.Distance", "Distance", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Kilometers")
                                .HasColumnType("decimal(8,2)")
                                .HasColumnName("DistanceKm");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.OwnsOne("DispatchManager.Domain.ValueObjects.Quantity", "Quantity", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<int>("Value")
                                .HasColumnType("int")
                                .HasColumnName("Quantity");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Cost")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Destination")
                        .IsRequired();

                    b.Navigation("Distance")
                        .IsRequired();

                    b.Navigation("Origin")
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Quantity")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
